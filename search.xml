<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第一篇文章 - Hello World</title>
    <url>/post/1st.html</url>
    <content><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><p> <strong>這裡是用Hexo前端技術架設!</strong></p>
<h2 id="hexo框架特點"><a href="#hexo框架特點" class="headerlink" title="hexo框架特點:"></a>hexo框架特點:</h2><ul>
<li>你可以使用MARKDOWN 語法來寫!</li>
</ul>
<ul>
<li>編輯快速 使用node.js</li>
<li>可以與Github Pages heroku…等 部屬網站。</li>
<li>豐富的外掛系統</li>
</ul>
<h4 id="之後我會在這邊發布一些我競程學習的東西-也歡迎大家一起交流"><a href="#之後我會在這邊發布一些我競程學習的東西-也歡迎大家一起交流" class="headerlink" title="之後我會在這邊發布一些我競程學習的東西~ 也歡迎大家一起交流"></a>之後我會在這邊發布一些我競程學習的東西~ 也歡迎大家一起交流</h4><h2 id="其他頁面"><a href="#其他頁面" class="headerlink" title="其他頁面:"></a>其他頁面:</h2><p><strong>你可以按上面的按鈕導航(手機則為</strong> <em>三條線</em> <strong>)，看看一些不一樣的東西</strong></p>
]]></content>
      <categories>
        <category>初次</category>
      </categories>
  </entry>
  <entry>
    <title>[C++] 巢狀迴圈－三角形繪製２</title>
    <url>/post/cpp3.html</url>
    <content><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目:"></a>題目:</h1><h4 id="出處：SA-流-C-競程修練心法"><a href="#出處：SA-流-C-競程修練心法" class="headerlink" title="出處：SA 流 C++ 競程修練心法"></a>出處：<a class="link"   href="https://hackmd.io/@sa072686/cp/%2F%40sa072686%2FrJpY0i7PS" >SA 流 C++ 競程修練心法<i class="fas fa-external-link-alt"></i></a></h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/image/tango.png"
                     
                ></p>
<h2 id="思考方法："><a href="#思考方法：" class="headerlink" title="思考方法："></a>思考方法：</h2><p>我先以 <code>輸出3個#</code> 為例子，下去推想。</p>
<blockquote>
<p>輸出 1 個 #<br>輸出 2 個 #<br>輸出 3 個 #<br>輸出 2 個 #<br>輸出 1 個 #</p>
</blockquote>
<p>分成 <code>兩層來輸出</code> 的話 則：</p>
<h4 id="第一層"><a href="#第一層" class="headerlink" title="第一層"></a>第一層</h4><blockquote>
<p>輸出 １ 個 #<br>輸出 ２ 個 #<br>輸出 ３ 個 #</p>
</blockquote>
<h4 id="第二層"><a href="#第二層" class="headerlink" title="第二層"></a>第二層</h4><blockquote>
<p>輸出 ２ 個 #<br>輸出 １ 個 #</p>
</blockquote>
<h4 id="再來假設環節，"><a href="#再來假設環節，" class="headerlink" title="再來假設環節，"></a>再來假設環節，</h4><p>要做n次，所以 <code>第一層的迴圈</code> 即為 <strong>遞增</strong>：</p>
<pre><code class="c++">    for (i=1;i&lt;=n;i++&gt;) &#123;
        //進來迴圈 → 輸出i個 # → 輸出換行
    &#125;
</code></pre>
<p>再來，是 # 的部分<br>所以：</p>
<pre><code class="cpp">    for(j=0;j&lt;i;j++&gt;) &#123;
        cout &lt;&lt; &quot;#&quot;;
    &#125;
</code></pre>
<h4 id="合體，第一層就完成了！"><a href="#合體，第一層就完成了！" class="headerlink" title="合體，第一層就完成了！"></a>合體，第一層就完成了！</h4><pre><code class="cpp">    for (i=1;i&lt;=n;i++&gt;) &#123;
        for (j=0;j&lt;i;j++&gt;) &#123;
            cout &lt;&lt; &quot;#&quot;;
        &#125;
        cout &lt;&lt; &quot;\n&quot; ;
    &#125;
</code></pre>
<p>而當我們達到 <code>輸出 n 次</code> 的 # 時<br>我們要倒回去 ， 即為 <strong>遞減</strong></p>
<pre><code class="cpp">    for (i=n;i&gt;0;i--) &#123;
        // 進入迴圈 → 輸出(n-1)個 → 輸出換行
        cout &lt;&lt; &quot;\n&quot;;
    &#125;
</code></pre>
<p>接著處理 <code>輸出 (n-1) 個 #</code></p>
<pre><code class="cpp">    for (j=0;j&lt;i;j++&gt;) &#123;
        cout &lt;&lt; &quot;#&quot;;
    &#125;
</code></pre>
<h4 id="合體！"><a href="#合體！" class="headerlink" title="合體！"></a>合體！</h4><pre><code class="cpp">    for (i=n;i&gt;0;i--) &#123;
        for (j=0;j&lt;i;j++&gt;) &#123;
            cout &lt;&lt; &quot;#&quot;;
        &#125;
        cout &lt;&lt; &quot;\n&quot;;
    &#125;
</code></pre>
<h3 id="將第一層與第二層合併"><a href="#將第一層與第二層合併" class="headerlink" title="將第一層與第二層合併"></a>將第一層與第二層合併</h3><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;

int main() &#123;
  int n;
  int i, j;
  cin &gt;&gt; n;
  for (i = 1; i &lt;= n; i++) &#123;
    for (j = 0; j &lt; ij; j++) &#123;
      cout &lt;&lt; &quot;#&quot;;
    &#125;
    cout &lt;&lt; &quot;\n&quot;;
  &#125;
  for (i = n; i &gt; 0; i--) &#123;
    for (j = 0; j &lt; i; j++) &#123;
      cout &lt;&lt; &quot;#&quot;;
    &#125;
    cout &lt;&lt; &quot;\n&quot;;
  &#125;
  return 0;
&#125;
</code></pre>
<h2 id="解題心得"><a href="#解題心得" class="headerlink" title="解題心得"></a>解題心得</h2><ul>
<li>我剛開始解這題，一直把它侷限在用一個大迴圈包數個小迴圈的巢狀結構去解。沒想到換個思路後，解起來比較輕鬆。<br>不要太過於執著一把幹到底</li>
<li>對於<code>巢狀迴圈</code>有更多的了解了！</li>
<li>我解題會把迴圈拆的一個步驟一個迴圈去想，一次處裡多個迴圈我腦子會炸！</li>
</ul>
]]></content>
      <categories>
        <category>競程</category>
      </categories>
      <tags>
        <tag>code</tag>
        <tag>練習</tag>
        <tag>競程</tag>
      </tags>
  </entry>
  <entry>
    <title>[C++] toj 104 星星樹</title>
    <url>/post/cpp2.html</url>
    <content><![CDATA[<h1 id="toj-104-星星樹"><a href="#toj-104-星星樹" class="headerlink" title="toj 104 星星樹"></a>toj 104 星星樹</h1><p><a class="link"   href="https://toj.tfcis.org/oj/pro/104/" >星星樹<i class="fas fa-external-link-alt"></i></a> 是這次我要練習的題目。<br>與巢狀迴圈有關。</p>
<h2 id="題目"><a href="#題目" class="headerlink" title="題目:"></a>題目:</h2><p>大家都知道，星星是長在樹上的。星星樹，自然就是上面長了星星的樹。</p>
<p>園丁JD3工作是專門維護長在資訊社社部的星星樹。工作包括每天澆水，拔雜草，防治蟲害（DEBUG）等等。當然，還有把星星樹定期修剪成整齊的形狀。</p>
<p>星星樹的樹枝發展相當有規律，呈現層狀。一棵好看的星星樹並且從樹的底端開始，往上呈現整齊的圓錐狀。為了保持穩定不傾倒，每一層的星星會修剪的比下面一層少正好兩顆。星星樹最頂端，則總是最閃亮的，那一顆的星星。</p>
<blockquote>
<p>輸入說明</p>
</blockquote>
<p><code>一個數字N，代表星星樹的高度。</code></p>
<blockquote>
<p>輸出說明</p>
</blockquote>
<p><code>星星樹。</code></p>
<blockquote>
<p>範例輸入</p>
</blockquote>
<p><code>4</code></p>
<blockquote>
<p>範例輸出</p>
</blockquote>
<pre><code class="cpp">   *
  ***
 *****
*******
</code></pre>
<h2 id="思考方法"><a href="#思考方法" class="headerlink" title="思考方法"></a>思考方法</h2><p>首先，我將發生的事情寫下來，設了兩個變數: wall, space</p>
<pre><code class="html">// 0 space 7 #
// 1 space 5 #
// 2 space 3 #
// 3 space 1 #

// space wall
</code></pre>
<p>再來，利用迴圈完成。<br>大概就出來了。</p>
<pre><code class="cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;

int main() &#123;
  int n;
  cin &gt;&gt; n;
  for (int i = 0; i &lt; n; i++) &#123; //大迴圈: 次數
    for (int space = 1; space &lt; n-i; space++) &#123; //空白處理迴圈- 
    //空白由上往下遞減.
      cout &lt;&lt; &quot; &quot;;
    &#125;
    for (int wall = 0; wall &lt; 2*i+1; wall++) &#123; //2*i+1 為奇數
      cout &lt;&lt; &quot;*&quot;;
    &#125;
    cout &lt;&lt; &quot;\n&quot;;
  &#125;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>競程</category>
      </categories>
      <tags>
        <tag>code</tag>
        <tag>練習</tag>
        <tag>競程</tag>
      </tags>
  </entry>
  <entry>
    <title>[C++] 巢狀迴圈－三角形繪製１</title>
    <url>/post/cpp.html</url>
    <content><![CDATA[<h1 id="巢狀迴圈"><a href="#巢狀迴圈" class="headerlink" title="巢狀迴圈"></a>巢狀迴圈</h1><p><strong>巢狀迴圈</strong>  迴圈包覆著迴圈。</p>
<p>在解題時，我會將想法先列出來 再一個一個去假設變數..or loop 等等。 </p>
<h2 id="範例題目"><a href="#範例題目" class="headerlink" title="範例題目:"></a><em>範例題目:</em></h2><p><strong>範例輸入</strong></p>
<blockquote>
<p> 5  </p>
</blockquote>
<p><strong>範例輸出</strong></p>
<blockquote>
<p>$<br>$$<br>$$$<br>$$$$<br>$$$$$</p>
</blockquote>
<h2 id="思考方法"><a href="#思考方法" class="headerlink" title="思考方法:"></a>思考方法:</h2><ol>
<li>要做幾次 ?</li>
<li>要輸出幾個 <strong>$</strong> ?</li>
<li>最後再輸出換行 “\n”</li>
</ol>
<h1 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h1><pre><code class="cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;

int main () &#123;
    int n;
    int i,j;
    cin &gt;&gt; n;
    for (i=1;i&lt;n;i++) &#123;
        for (j=0;j&lt;i;j++) &#123;
            cout &lt;&lt; &quot;$&quot;;
        &#125;
        cout &lt;&lt; &quot;\n&quot;;
    &#125;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>競程</category>
      </categories>
      <tags>
        <tag>code</tag>
        <tag>練習</tag>
        <tag>競程</tag>
      </tags>
  </entry>
</search>
